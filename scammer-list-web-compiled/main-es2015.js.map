{"version":3,"sources":["./$_lazy_route_resource lazy namespace object","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/main/main.component.ts","./src/app/main/main.component.html","./src/app/services/main.service.ts","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":"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","file":"main-es2015.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.sass']\n})\nexport class AppComponent implements OnInit {\n  text = '.';\n  ngOnInit() {\n  }\n\n}\n","<!-- <div id=\"lol\"></div> -->\n<app-header></app-header>\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\n\nimport { AppComponent } from './app.component';\nimport { MainComponent } from './main/main.component';\nimport { HttpClientModule } from '@angular/common/http';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    MainComponent\n  ],\n  imports: [\n    BrowserModule,\n    HttpClientModule,\n    ReactiveFormsModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit } from '@angular/core';\nimport Typewriter from 't-writer.js';\nimport { MainService } from '../services/main.service';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ServerResponse } from './response';\n\n@Component({\n  selector: 'app-header',\n  templateUrl: './main.component.html',\n  styleUrls: ['./main.component.sass']\n})\nexport class MainComponent implements OnInit {\n\n  form: FormGroup;\n  response: ServerResponse;\n\n  nameText: string;\n  messageText: string;\n\n  constructor(private service: MainService, private formBuilder: FormBuilder) {\n  }\n\n  ngOnInit(): void {\n\n    this.form = this.formBuilder.group({\n      name: ['', [\n        Validators.required,\n        Validators.minLength(2)\n      ]],\n      message: ['', [\n        Validators.required,\n        Validators.minLength(2)\n      ]]\n    })\n  }\n\n  get name() {\n    return this.form.get('name').value\n  }\n\n  get message() {\n    return this.form.get('message').value\n  }\n\n  fetchResult() {\n    if (this.form.get('name').errors || this.form.get('message').errors) {\n      alert(\"Please check your input\")\n    } else {\n      const target = document.getElementById('loading')\n      const options = {\n        typeColor: '#40f029',\n        typeSpeed: 47,\n      }\n      const writer = new Typewriter(target, options)\n      writer.type('> Connecting....').rest(1000).removeCursor().start();\n      return this.service.getResult(this.name, this.message).subscribe(next => {\n        this.response = next\n        writer.clear()\n        writer.type('> Connected to server').rest(4000).start()\n        writer.clear()\n        setTimeout(() => {this.setResponse(this.response)}, 500)\n      })\n    }\n  }\n\n  setResponse(response: ServerResponse) {\n    const score: number = +response.Score\n    if(response.Scammer === false){\n      this.nameText = `> The name \"${response.Name}\" is not in our scam/spam database`\n    } else {\n      this.nameText = `> \"${response.Name}\" is a scammer/spammer !`\n    }\n\n    if(score <= 5) {\n      this.messageText = `> The message provided dosen't look like spam`\n    } else {\n      this.messageText = `> The message looks like a spam/scam message !`\n    }\n  }\n\n}","<section class=\"columns\">\n    <div class=\"banner column\">\n        <div class=\"heading tm\">\n            Scammer <br> List\n        </div>\n        <p class=\"text\">\n            Scammer List a service which filters spam profiles, websites, and analyzes message for spamming content using it's database of spam content and machine learning.\n            <br><br>\n            <span>Developed as a project of E-Raksha, with ❤️ in India</span>\n        </p>\n    </div>\n    <div class=\"graphics column\">\n        <img src=\"../../assets/map.svg\">\n    </div>\n</section>\n\n<main class=\"columns is-two-thirds-tablet\">\n    <div class=\"form column\">\n        <form [formGroup]=\"form\" (ngSubmit)=\"fetchResult()\">\n            <input formControlName=\"name\" class=\"input is-medium\" type=\"text\" placeholder=\"Name\" required>\n            <textarea formControlName=\"message\" class=\"textarea\" placeholder=\"message\" required></textarea>\n            <br>\n            <button type=\"submit\" class=\"button is-dark is-medium\">Submit</button>\n        </form>\n    </div>\n    <div class=\"result ubuntu column\">\n        <strong>> Fill in the form to see the output here</strong>\n        <br>\n        <strong id=\"loading\"></strong>\n        <br>\n\n        <strong *ngIf=\"response\">> Scam weightage: {{response.Score}}</strong>\n        <br>\n        <strong *ngIf=\"response\">> Website: {{response.Website}}</strong>\n        <br>\n        <strong *ngIf=\"nameText\">{{ nameText }}</strong><br>\n        <strong *ngIf=\"messageText\">{{ messageText }}</strong>\n    </div>\n</main>","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MainService {\n\n  constructor(private http: HttpClient\n    ) { }\n\n  getResult(name, message){\n    return this.http.get(`http://54.162.146.101/api.php?name=${name}&message=${message}`)\n  }\n}\n\n// http://54.162.146.101/api.php?name=john&message=hello\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":"webpack:///"}